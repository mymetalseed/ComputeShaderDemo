// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Circles
#pragma kernel Clear

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct circle
{
    float2 origin;
    float2 velocity;
    float radius;
};

StructuredBuffer<circle> circlesBuffer;

int texResolution;
float4 clearColor;
float4 circleColor;
float time;

float random(float value,float seed = 0.546)
{
    float random = (frac(sin(value + seed) * 143758.5453));
    return random;
}

float2 random2(float value)
{
    return float2(
            random(value,3.9812),
            random(value,7.1536)
        );
}

void plot1(int x,int y,int2 center)
{
    Result[uint2(center.x + x,center.y + y)] = circleColor;
}

void plot8(int x,int y,int2 center)
{
    plot1(x,y,center); plot1(y,x,center);
    plot1(x,-y,center); plot1(y,-x,center);
    plot1(-x,-y,center); plot1(-y,-x,center);
    plot1(-x,y,center); plot1(-y,x,center);
}

void drawCircle(int2 center,int radius)
{
    int x = 0;
    int y = radius;
    int d = 1 - radius;

    while(x<y)
    {
        if(d < 0)
        {
            d += 2*x + 3;
        }else
        {
            d += 2*(x-y) + 5;
            y--;
        }

        plot8(x,y,center);
        x++;
    }
}

[numthreads(32,1,1)]
void Circles (uint3 id : SV_DispatchThreadID)
{
    int2 center = (int2)(circlesBuffer[id.x].origin + circlesBuffer[id.x].velocity * time);
    int radius = (int)circlesBuffer[id.x].radius;

    while(center.x > texResolution) center.x -= texResolution;
    while(center.x < 0) center.x += texResolution;
    while(center.y > texResolution) center.y -= texResolution;
    while(center.y < 0) center.y += texResolution;
    
    drawCircle(center,radius);
}

[numthreads(8,8,1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = clearColor;
}
